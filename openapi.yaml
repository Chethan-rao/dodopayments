openapi: "3.0.2"
info:
  title: dodopayments API
  description: API for managing users and transactions.
  version: "0.1.0"
servers:
  - url: http://localhost:3001
    description: Local server
tags:
  - name: User
    description: API for managing users
  - name: Transaction
    description: API for managing transactions
paths:
  /health:
    get:
      tags:
        - Health
      summary: Get Health
      description: To check whether the application is up
      responses:
        "200":
          description: Health is good
          content:
            text/plain:
              schema:
                type: string
                example: health is good
  /user/signup:
    post:
      tags:
        - User
      summary: User signup endpoint
      description: |
        Endpoint for registering new users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /user/login:
    post:
      tags:
        - User
      summary: User login endpoint
      description: |
        Endpoint for logging in existing users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Incorrect password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /user:
    get:
      tags:
        - User
      summary: Get user profile
      description: |
        Retrieves the profile information for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
    put:
      tags:
        - User
      summary: Update user profile
      description: |
        Updates the profile information for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /transaction:
    post:
      tags:
        - Transaction
      summary: Create a new transaction
      description: |
        Endpoint for creating a new transaction.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
      responses:
        "201":
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTransactionResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
    get:
      tags:
        - Transaction
      summary: List transactions
      description: |
        Endpoint for listing transactions with pagination.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: page_size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        "200":
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTransactionsResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /transaction/{transaction_id}:
    get:
      tags:
        - Transaction
      summary: Get transaction by ID
      description: |
        Endpoint for retrieving a transaction by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: transaction_id
          required: true
          schema:
            type: string
          description: The ID of the transaction to retrieve
      responses:
        "200":
          description: Transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTransactionResponse"
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SignUpRequest:
      type: object
      properties:
        name:
          type: string
          example: Test User
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: Password123!
      required:
        - name
        - email
        - password
    SignUpResponse:
      type: object
      properties:
        user_id:
          type: string
          example: uuid
        name:
          type: string
          example: Test User
        email:
          type: string
          example: test@example.com
        created_at:
          type: string
          example: "2024-01-01T00:00:00Z"
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: test@example.com
        password:
          type: string
          example: Password123!
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: jwt_token
        user_id:
          type: string
          example: uuid
    GetUserResponse:
      type: object
      properties:
        user_id:
          type: string
          example: uuid
        email:
          type: string
          example: test@example.com
        name:
          type: string
          example: Test User
        balance_in_rs:
          type: number
          format: double
          example: 100.0
        created_at:
          type: string
          example: "2024-01-01T00:00:00Z"
        last_modified_at:
          type: string
          example: "2024-01-01T00:00:00Z"
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: New Name
        amount:
          type: number
          format: double
          example: 200.0
    UpdateUserResponse:
      type: object
      properties:
        user_id:
          type: string
          example: uuid
        name:
          type: string
          example: New Name
        balance_in_rs:
          type: number
          format: double
          example: 200.0
    ApiErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: TE_00
        message:
          type: string
          example: "Incorrect password"
        data:
          type: object
          nullable: true
    CreateTransactionRequest:
      type: object
      properties:
        sender_id:
          type: string
          example: user_id
        receiver_id:
          type: string
          example: user_id
        amount:
          type: number
          format: double
          example: 10.0
      required:
        - sender_id
        - receiver_id
        - amount
    GetTransactionResponse:
      type: object
      properties:
        transaction_id:
          type: string
          example: transaction_id
        sender_id:
          type: string
          example: user_id
        receiver_id:
          type: string
          example: user_id
        amount:
          type: number
          format: double
          example: 10.0
        created_at:
          type: string
          example: "2024-01-01T00:00:00Z"
    ListTransactionsResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/GetTransactionResponse"
        total_count:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
